[{
        "title": "How to make debug-friendly method references",
        "author": "Iany",
        "date": "July 24 at 13:27",
        "tags": ["Programming", "Java"],
        "text": "Java 8 introduced two kinds of functional expressions: lambda expressions like s -> System.out.println(s) and method references like System.out::println. At first, developers were more enthusiastic about method references: they are often more compact, you don't need to think up the parameter name, and, as urban legends say, method references are somewhat more optimal than lambda expressions. Over time, however, the enthusiasm waned. One of the problems with method references is the difficulty in debugging."
    },
    {
        "title": "A Beautiful Error in the Implementation of the String Concatenation Function",
        "author": "Andrey",
        "date": "July 22 at 09:42",
        "tags": ["PVS-Studio company blog", "C"],
        "text": "We, the PVS-Studio static code analyzer developers, have a peculiar view on beauty. On the beauty of bugs. We like to find grace in errors, examine them, try to guess how they appeared. Today we have an interesting case when the concepts of length and size got mixed up in the code."
    },
    {
        "title": "Mode on: Comparing the two best colorization AI's",
        "author": "man_of_letters",
        "date": "July 22 at 09:03",
        "tags": [
            "RUVDS.com company blog",
            "Python",
            "Image processing",
            "Machine learning",
            "TensorFlow"
        ],
        "text": "This article continues a series of notes about colorization. During today's experiment, we’ll be comparing a recent neural network with the good old Deoldify to gauge the rate at which the future is approaching. This is a practical project, so we won’t pay extra attention to the underlying philosophy of the Transformer architecture. Besides, any attempt to explain the principles of its operation to a wide public in hand waving terms would become misguiding."
    },
    {
        "title": "How to create LinkedIn-like reactions with Serverless Redis",
        "author": "turSystem",
        "date": "July 21 at 13:04",
        "tags": ["Website development", "JavaScript", "NoSQL", "Node.JS", "ReactJS"],
        "text": "As a side hustle, I teach tech recruiters web and software development technologies using plain English. It helps them with understanding job specs and resumes and it makes all of us, tech people, happier. I run a weekly newsletter and often get feedback from recruiters via email or LinkedIn DMs. I thought that I could try to collect feedback using the “Reactions” feature just like LinkedIn or Facebook does. It’s not as informative as personalised messages but is a simple feature that may incentivize more people to provide some general feedback.  Either way, it’s worth trying and as a software developer, I can’t wait to implement it. This tutorial is about implementing a feature that will be used in real life on my project."
    }
]